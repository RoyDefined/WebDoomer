using System.Diagnostics;
using WebDoomer.Zandronum;

namespace WebDoomerTests;

public class HuffmanMasterServerDataTests
{
	/// <summary>
	/// Runs a test that parses bytes compressed using Huffman encoding, resulting in master server data.
	/// </summary>
	/// <param name="data">The packet data that is to be parsed. The 2d array represents rows of bytes, each representing one single packet.</param>
	/// <param name="checks">A collection of checks that are used to validate the final parsed result.</param>
	[Theory]
	[MemberData(nameof(Data))]
	public void HuffmanEncodedBytesCanBeParsedIntoMasterServerDataUsingBuilder(byte[][] data, Func<MasterServerResult, bool>[] checks)
	{
		Debug.Assert(data != null);
		Debug.Assert(checks != null);

		Packet[]? packets = null;
		var exception = Record.Exception(() =>
			packets = data.Select(x => new HuffmanPacket(x))
				.ToArray());

		Assert.Null(exception);
		Debug.Assert(packets != null);

		var builder = new MasterServerResultBuilder();
		exception = Record.Exception(() =>
		{
			foreach(var packet in packets)
			{
				_ = builder.Parse(packet);
			}
		});

		Assert.Null(exception);

		MasterServerResult? result = null;
		exception = Record.Exception(() =>
			result = builder.Build(false));

		Assert.Null(exception);
		Debug.Assert(result != null);

		var index = 1;
		foreach(var check in checks)
		{
			Assert.True(check(result), $"Check {index} failed.");
			index++;
		}
	}

	public static IEnumerable<object[]> Data
	{
		get
		{
			byte[][] bytes =
			[
				[255, 6, 0, 0, 0, 0, 8, 2, 101, 98, 37, 99, 171, 41, 173, 41, 110, 104, 128, 58, 120, 170, 41, 171, 41, 172, 41, 173, 41, 174, 41, 175, 41, 176, 41, 177, 41, 178, 41, 179, 41, 180, 41, 181, 41, 182, 41, 183, 41, 184, 41, 185, 41, 186, 41, 187, 41, 188, 41, 189, 41, 190, 41, 191, 41, 192, 41, 193, 41, 194, 41, 195, 41, 196, 41, 197, 41, 198, 41, 199, 41, 200, 41, 201, 41, 202, 41, 203, 41, 204, 41, 206, 41, 207, 41, 208, 41, 209, 41, 210, 41, 211, 41, 212, 41, 213, 41, 214, 41, 216, 41, 217, 41, 218, 41, 219, 41, 220, 41, 221, 41, 222, 41, 223, 41, 224, 41, 225, 41, 226, 41, 227, 41, 229, 41, 230, 41, 231, 41, 232, 41, 233, 41, 234, 41, 235, 41, 236, 41, 237, 41, 238, 41, 239, 41, 240, 41, 241, 41, 242, 41, 243, 41, 244, 41, 245, 41, 246, 41, 247, 41, 248, 41, 249, 41, 250, 41, 251, 41, 252, 41, 253, 41, 254, 41, 255, 41, 0, 42, 1, 42, 3, 42, 5, 42, 7, 42, 8, 42, 9, 42, 10, 42, 12, 42, 14, 42, 15, 42, 17, 42, 19, 42, 20, 42, 21, 42, 22, 42, 23, 42, 25, 42, 26, 42, 28, 42, 29, 42, 30, 42, 31, 42, 32, 42, 33, 42, 34, 42, 35, 42, 1, 104, 236, 160, 159, 170, 41, 2, 109, 164, 34, 143, 170, 41, 171, 41, 1, 109, 204, 187, 108, 170, 41, 4, 129, 148, 39, 85, 170, 41, 171, 41, 172, 41, 173, 41, 1, 130, 162, 187, 5, 170, 41, 29, 134, 195, 14, 136, 171, 41, 172, 41, 173, 41, 174, 41, 175, 41, 176, 41, 177, 41, 178, 41, 179, 41, 180, 41, 181, 41, 182, 41, 183, 41, 184, 41, 185, 41, 186, 41, 187, 41, 188, 41, 189, 41, 190, 41, 191, 41, 192, 41, 193, 41, 194, 41, 195, 41, 196, 41, 197, 41, 199, 41, 200, 41, 59, 142, 132, 155, 163, 170, 41, 172, 41, 173, 41, 174, 41, 175, 41, 176, 41, 177, 41, 178, 41, 179, 41, 180, 41, 181, 41, 182, 41, 183, 41, 184, 41, 185, 41, 186, 41, 187, 41, 188, 41, 189, 41, 192, 41, 193, 41, 195, 41, 196, 41, 197, 41, 198, 41, 199, 41, 200, 41, 201, 41, 202, 41, 203, 41, 204, 41, 205, 41, 206, 41, 207, 41, 208, 41, 209, 41, 210, 41, 211, 41, 212, 41, 213, 41, 214, 41, 215, 41, 216, 41, 217, 41, 218, 41, 219, 41, 220, 41, 221, 41, 222, 41, 223, 41, 224, 41, 225, 41, 226, 41, 227, 41, 228, 41, 229, 41, 231, 41, 232, 41, 234, 41, 6, 144, 172, 74, 86, 170, 41, 171, 41, 172, 41, 173, 41, 174, 41, 175, 41, 11, 144, 22, 240, 60, 170, 41, 171, 41, 172, 41, 173, 41, 174, 41, 186, 80, 187, 80, 188, 80, 202, 119, 203, 119, 204, 119, 1, 146, 59, 203, 80, 170, 41, 2, 147, 182, 255, 73, 170, 41, 171, 41, 1, 152, 67, 110, 201, 170, 41, 12, 152, 69, 187, 23, 170, 41, 171, 41, 172, 41, 174, 41, 176, 41, 178, 41, 179, 41, 180, 41, 181, 41, 182, 41, 183, 41, 192, 41, 7, 155, 248, 198, 118, 194, 37, 195, 37, 196, 37, 197, 37, 198, 37, 199, 37, 200, 37, 1, 156, 57, 96, 179, 170, 41, 1, 159, 203, 142, 101, 170, 41, 1, 162, 210, 21, 22, 158, 135, 1, 162, 212, 158, 87, 176, 41, 1, 162, 248, 94, 121, 170, 41, 5, 162, 248, 95, 73, 170, 41, 171, 41, 172, 41, 173, 41, 174, 41, 1, 165, 22, 235, 111, 170, 41, 3, 168, 75, 100, 235, 170, 41, 171, 41, 173, 41, 1, 170, 75, 170, 116, 181, 41, 3, 173, 255, 226, 253, 61, 41, 104, 41, 204, 41, 1, 174, 61, 200, 170, 170, 41, 4, 178, 118, 159, 67, 172, 41, 173, 41, 174, 41, 175, 41, 3, 185, 150, 189, 56, 205, 41, 206, 41, 207, 41, 12, 185, 241, 149, 208, 177, 41, 179, 41, 180, 41, 181, 41, 182, 41, 183, 41, 185, 41, 186, 41, 188, 41, 189, 41, 190, 41, 191, 41, 1, 185, 73, 243, 30, 190, 41, 1, 188, 187, 87, 45, 170, 41, 1, 190, 20, 61, 131, 170, 41, 23, 192, 155, 90, 89, 170, 41, 171, 41, 172, 41, 173, 41, 174, 41, 175, 41, 176, 41, 177, 41, 178, 41, 179, 41, 180, 41, 181, 41, 182, 41, 183, 41, 184, 41, 185, 41, 186, 41, 187, 41, 188, 41, 189, 41, 190, 41, 191, 41, 192, 41, 2, 192, 9, 173, 60, 170, 41, 171, 41, 4, 194, 132, 164, 245, 170, 41, 171, 41, 172, 41, 173, 41, 1, 198, 244, 176, 50, 170, 41, 1, 205, 206, 56, 155, 170, 41, 1, 207, 136, 119, 253, 182, 41, 20, 207, 211, 154, 73, 170, 41, 171, 41, 172, 41, 173, 41, 174, 41, 175, 41, 176, 41, 177, 41, 179, 41, 180, 41, 181, 41, 182, 41, 183, 41, 184, 41, 185, 41, 186, 41, 187, 41, 188, 41, 189, 41, 190, 41, 1, 213, 112, 171, 178, 170, 41, 2, 216, 86, 93, 169, 172, 41, 173, 41, 1, 217, 27, 226, 138, 170, 41, 2, 222, 187, 221, 243, 102, 39, 103, 39, 1, 24, 16, 102, 29, 170, 41, 4, 3, 18, 141, 186, 165, 41, 166, 41, 169, 41, 170, 41, 6, 34, 174, 119, 83, 170, 41, 171, 41, 172, 41, 173, 41, 174, 41, 25, 42, 1, 34, 230, 46, 110, 170, 41, 1, 34, 84, 199, 151, 170, 41, 5, 37, 153, 1, 44, 170, 41, 171, 41, 172, 41, 173, 41, 184, 41, 2, 45, 136, 59, 100, 171, 41, 172, 41, 1, 45, 26, 227, 197, 171, 41, 1, 45, 32, 219, 143, 170, 41, 1, 45, 46, 202, 85, 226, 223, 0, 7],
			];

			Func<MasterServerResult, bool>[] checks =
			[
				(result => result.ServerChallengeResponse == ServerChallengeResponseType.beginServerListPart),
				(result => result.Hosts.Any(x => x.Address.ToString() == "144.22.240.60")),
				(result => result.Hosts.Single(x => x.Address.ToString() == "144.22.240.60").Ports.Any(x => x == 10670)),
			];

			yield return new object[] { bytes, checks };
		}
	}
}